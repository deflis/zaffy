・結果出力機能の作成
・各アクションの設定の自動読み込み
・各アクション（シナリオごとに）設定の上書き、リセット
・sshアクションの作成
・scpアクションの作成
・shellアクションの作成
・アクション実行時のパラメータを jinja で展開できるようにする
・グローバルに使用可能な file の作成
  - read, copy, remove, move, exists, readable, writable, executable, size, created_date, updated_date, stats
・time の作成
  - now
・os の作成
・定数を定義してHTTPパラメータやSQLで使用できるようにする
・import.action でシナリオを読み込むのはいいが、importされる側のアクションが単体で実行されると困る
  （シナリオファイルの形式も要検討）
・アクションとして使用可能なものと、jinjaテンプレート内で
　使用可能なグローバルオブジェクトを一緒にしても良いかも。
　例えば、file アクションで do_read という staticmethod を定義したら、
　それは <<file.read("hoge.txt")>> という形で使用可能にする、とか
・↑そうすると、const アクションを作成して、定数定義も可能になりそう。
　const の actionインスタンスに対して値を set すると、その値はクラス変数にセットされて、
　staticmethodから参照できるようになる
・シナリオファイルはできるだけシンプルにしたいので、以下のようにトップレベルがリストで
　アクションをずらずと並べるようにしたい。ただし、その場合、ドキュメントを記述できないので
　１要素目を全体のドキュメント、２行目以降の文字列要素は次のアクションの説明、という風に解釈しようか？
　あるいは、actionのなかに desc などの要素を作る（こっちの方がすっきり？）
　 - 結果の確認テスト
   - action: http.get
     desc:
      ...
   - action: sql.select
      ...
・SQLアクションにxlsxファイルからデータを読み込んでinsertできるメソッドを追加する

完了
・todateフィルターの作成（mysqlのdateカラムはdatetime.dateオブジェクトに変換されるはず）
・sqlアクションのdo_updateを作成(複数個のSQLを実行できるようにする)
・has_assert などの action 共通メソッドを create_action 時に inject する（継承はしない）
・assert で使う res のプロパティは全部、自前 __cmp__ を定義した比較用オブジェクトにラップする。（assert 失敗したときに期待値と実際の値を返せるように）
・customtests (json_equalなど) の失敗時にもログを残すようにする
・アクションで run を実行した時のレスポンスタイムを記録する
・AssertionErrorになったときに、どのアクションの何個目のassertで失敗したかを表示する
・AssertionErrorになったときに、チェックした変数の値を表示する
・アクションをインスタンス化するたびに action モジュールにメソッド追加するのはあほらしいので、action_klass をメモ化しておく
・action._run の中で、実行が終わったら即結果を wrap するのではなく、assert するとき（variables を定義するとき）にだけ wrap するようにする。（他のactionから結果を参照するときにややこしいことになるので）
・1回の assert ごとに cmp_log をクリアするようにする。じゃないと他の assert の比較結果が残ってしまうので

保留
・sqlアクションでファイルからsqlを読み込んで実行する機能を追加
→自前でsqlファイルをパースできないと駄目
