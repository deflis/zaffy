filetype: scenario

- import: action
  # test_scenario ディレクトリから絶対パスで探索する
  # .insert と書けばこのファイルの同じディレクトリから探索する
  # 拡張子は指定しない
  path: init.db.insert
  .name: prepare

- control: if
  # import アクションの結果を参照する場合はまずこのファイル内の位置を指定して、
  # さらにimportファイル内の位置を指定する
  # "<<actions.prepare(-1).status>>" のように名前指定も可
  assert: [$actions(-1)(-1).status, ==, 200]
  action_list:
    - action: http.get
      url: http://hoge.com/

- action: sql.select
  db: test_db
  sql: select * from advertisement

- action: sql.update
  db: test_db
  # 共通のルールとして hoge パラメータがある場合に、
  # hoge_list という名前で指定された場合は複数回繰り返すようにする
  sql_list: [
    truncate advertisement,
    truncate affiliate
  ]

- action: sql.source
  db: test_db
  filename: "truncate_all.sql"

- action: shell.run # copyfile, movefile, removefile
  cmd: "cp ~/hoge.txt <<global.pwd>>"

- action: system.set_date
  date: "2012-10-10 05:20:25"

- action: http.get
  # 共通のパラメータで何度もアクセスする場合などに、読み込む方法を考える """
  url: http://foo.co.jp/login
  params:
    user: hoge
    pass: fuga

- action: http.get
  url: http://foo.co.jp/
  headers:
    none: none
  params:
    hoge: fuga
    # パラメータ部分はjinja2テンプレートでカスタマイズできるようにする
    # http://jinja.pocoo.org/docs/api/#custom-filters
    # 変数については、全体で共通のものと、それぞれのアクションで注入したものを
    # 使えるようにする
    # どのパラメータの値を展開するかは action 定義に教えてもらう
    # これによって設定ファイルに定義した定数を埋め込むこともできる
    joinDate: $time.now|dateformat('%d-%m-%Y')

    # actionごとにレスポンスの値を取り出す方法を提供する
    # http であれば status, response_time, cookie や header, body など
    # それをパースする方法については filter として共通で提供する
    # xPath, XML, json値など
    sessionId: $actions(3).body|jsonpath('/sessionId') # actionsで任意の位置のactionにアクセス。
  .report: hoge

- action: http.get
  url: http://<<http.const.HOST>>/session/landing
  assert:
    [$.body|length, =<, 100]

- action: http.get
  url: http://foo.co.jp/
  assert_list: [
    [<<this.status>>, ==, 200],
    # 省略記法。先頭が $. で始まる文字列は <<this.～>> に置換してからjinjaに渡す。略記は最小限にしてまとめたい
    [$.status, ==, 200], # eq, (=)
    [$.status, <>, 200], # ne, (!=) とかかっこでくくるのも1案か。だったら "" でくくればいいじゃん…
    [$.body, ==, "hoge,fuga,piyo"],
    [$.body, ==, "<<file.read(global.pwd, test1.txt)>>"], # ファイルから読み込んで比較する
    [$.body, in, [hoge, fuga, piyo]], # not in
    [piyo, in, $.body],
    [$.body|length, ">=", 100], # >= は ">" が予約語でダメ. gt, ge, lt, le を使うか……
    [$.body|jsonpath('/age'), between, 20, 30],
    [hoge(piyo|fuga), regex in, <<this.body>>], # regex not in, regex equal
    [$.body, json equal, '{"isSuceeded":true, "price": 980}'], # json not equal
    [[$.body, ==, "hoge,fuga,piyo"],
     or,
     [$.status, ==, 400]],
    [$.status, eq, 200],
    [$.status, ne, 200],
    [$.body, eq, hoge],
    [$.body|length, ge, 100]
    [$.body, is empty]
    [$.body, not empty]
  ]

- control: if # endif で囲まれる箇所を実行する
  # 直前の status で分岐
  assert: [$actions(-1).status, ==, 200]

- action: http.get
  url: http://bar.com/

- control: endif

- control: if # 別の書き方
  assert: [$last.status, ==, 200]
  action_list:
   - action: http.get
     url: http://bar.com/

- control: for
  values: [hoge, fuga, piyo] # 数値の範囲を指定したい場合は ruby 風に 0..10
  # if と同じように action_list にまとめてもいい

- action: http.get
  url: http://example.co.jp/?index=<<loop.value>> # loop.index, loop.lengthなどが使える

- control: break
  assert: [$last.status, ==, 200] # この条件を満たしたときに break

- control: endfor

# 設計メモ
# - response_time などどのアクションでも共通っぽいものは共通で返す
# - アクションの結果などにアクセスする省略記法はできるだけ多くならないように整理する
#   先頭が $ で始まるものは jinja2 テンプレートとして処理するか
# - sql に関してはドライバ(mysql, sqlite, postgres)に関わらず共通インターフェースで使えるようにする
#   どのドライバを使うかはDBのユーザ名、パスワード等を書く設定ファイルで指定する
# - action について共通のパラメータを使う場合などの書き方
# - シナリオ全体で別のシナリオを参照する書き方
# - http action で必要なパラメータがセットされているかチェックする書き方
# - jinja テンプレートの開始・終了記号を <<, >> にしよう
# - assert のときの型変換どうする？片方が文字列、片方が数値の場合
#   →演算子ごとに挙動を変える ==, <=, >= については片方が数値の場合はもう片方も数値に変換する
# 期待値がでかいデータだったりバイナリであるときに、期待値ファイルを用意しといてそれと比較できるようにしたい

# $. を付けると、自身の結果にアクセス
#   eg. [$.status, ==, 200]
# $ を付けると、全体の共通変数にアクセス
#   eg. [$file.read(hoge), ==, @status]
#
# 共通変数の一覧（どんなのが必要か）
#   file (read:ファイルの読み込み)
#   time (now:現在時刻)
#   os (curdir:プログラムの起動ディレクトリ, hostname:ホスト名)
#   actions (このシナリオで起動したアクションの履歴)
#   last (直前のアクション)
#   const
