filetype: scenario
require: common/set_time

- action: sql.select
  sql: "select * from advertisement;"

- action: sql.update
  # 共通のルールとして hoge パラメータがある場合に、
  # hoge_list という名前で指定された場合は複数回繰り返すようにする
  sql_list: [
    "truncate advertisement",
    "truncate affiliate"
  ]

- action: sql.source
  filename: "truncate_all.sql"

- action: http.get
  # 共通のパラメータで何度もアクセスする場合などに、読み込む方法を考える """
  url: http://foo.co.jp/login
  params:
    user: hoge
    pass: fuga

- action: http.get
  url: http://foo.co.jp/
  headers:
    none: none
  params:
    hoge: fuga
    # パラメータ部分はjinja2テンプレートでカスタマイズできるようにする
    # http://jinja.pocoo.org/docs/api/#custom-filters
    # 変数については、全体で共通のものと、それぞれのアクションで注入したものを
    # 使えるようにする
    # どのパラメータの値を展開するかは action 定義に教えてもらう
    # これによって設定ファイルに定義した定数を埋め込むこともできる
    joinDate: "{{global.now|dateformat('%d-%m-%Y')}}"

    # actionごとにレスポンスの値を取り出す方法を提供する
    # http であれば status, response_time, cookie や header, body など
    # それをパースする方法については filter として共通で提供する
    # xPath, XML, json値など
    sessionId: "{{actions[3].body|jsonpath('/sessionId')}}" # actionsで任意の位置のactionにアクセス。last_actionで直前のアクションにアクセス
  .report: hoge

- action: http.get
  url: http://foo.co.jp/
  assert:
    ["{{this.body|length}}", <=, 100]

- action: http.get
  url: http://foo.co.jp/
  assert_list: [
    ["{{this.status}}", ==, 200],
    # 省略記法。先頭が $ で始まる文字列は {{～}}と内部で解釈する。略記は最小限にしてまとめたい
    # $. で始まる場合は現在のコンテキストで取得できる値 $.status など。global に取得したい場合は $global.～と書く
    [$this.status, ==, 200],
    ["{{this.status}}", !=, 200],
    ["{{this.body}}", ==, "hoge,fuga,piyo"],
    ["{{this.body}}", in, [hoge, fuga, piyo]], # not in
    ["{{this.length}}", <=, 100],
    ["{{this.body|jsonpath('/age')}}", between, 20, 30],
    ["hoge(piyo|fuga)", regex in, "{{this.body}}"], # regex not in
    ["{{this.body}}", json equal, '{"isSuceeded":true, "price": 980}'], # json not equal
    [["{{this.body}}", ==, "hoge,fuga,piyo"],
     or,
     ["{[this.status}}", ==, 400]]
  ]

- control: if # endif で囲まれる箇所を実行する
  assert: ["{{this.status}}", ==, 200]

- action: http.get
  url: http://bar.com/

- control: endif

- control: if # 別の書き方
  assert: ["{{this.status}}", ==, 200]
  action_list:
   - action: http.get
     url: http://bar.com/

- control: for
  values: "{{range(10)}}"
  assert: ["{{last_action.status}}", ==, 200] # なくても良い

- action: http.get
  url: "http://example.co.jp/?index={{loop.value}}" # loop.index, loop.lengthなどが使える

- control: endfor

# 設計メモ
# - response_time などどのアクションでも共通っぽいものは共通で返す
# - アクションの結果などにアクセスする省略記法はできるだけ多くならないように整理する
#   先頭が $ で始まるものは jinja2 テンプレートとして処理するか
# - sql に関してはドライバ(mysql, sqlite, postgres)に関わらず共通インターフェースで使えるようにする
#   どのドライバを使うかはDBのユーザ名、パスワード等を書く設定ファイルで指定する
# - action について共通のパラメータを使う場合などの書き方
# - シナリオ全体で別のシナリオを参照する書き方
# - http action で必要なパラメータがセットされているかチェックする書き方
# - jinja テンプレートの開始・終了記号を <<, >> にしよう
#
